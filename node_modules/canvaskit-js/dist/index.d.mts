import * as canvaskit_wasm from 'canvaskit-wasm';
import { EmbindObject, GrDirectContext, ColorSpace, ColorSpaceEnumValues, Color, InputRect, CanvasKit, TonalColorsInput, TonalColorsOutput, InputMatrix, Path, InputVector3, TypedArrayConstructor, MallocObj, Surface, ImageInfo, WebGLOptions, WebGPUCanvasOptions, WebGPUCanvasContext, TextureSource, PartialImageInfo, Image, AnimatedImage, EmulatedCanvas2D, SkPicture, EmbindEnumEntity, InputFlattenedPointArray, ColorIntArray, Vertices, SkottieAnimation, SoundMap, ManagedSkottieAnimation, ParagraphStyleConstructor, ContourMeasureIterConstructor, FontConstructor, DefaultConstructor, Paint, PathConstructorAndFactory, PictureRecorder, TextStyleConstructor, CanvasKitInitOptions } from 'canvaskit-wasm';

declare abstract class HostObject<T extends string> implements EmbindObject<any> {
    readonly __type__: T;
    constructor(__type__: T);
    clone(): any;
    delete(): void;
    deleteLater(): void;
    isAliasOf(_other: unknown): boolean;
    isDeleted(): boolean;
}

declare class GrDirectContextJS extends HostObject<"GrDirectContext"> implements GrDirectContext {
    readonly ctx: CanvasRenderingContext2D;
    private limit;
    private cache;
    constructor(ctx: CanvasRenderingContext2D);
    getResourceCacheLimitBytes(): number;
    getResourceCacheUsageBytes(): number;
    releaseResourcesAndAbandonContext(): void;
    setResourceCacheLimitBytes(limit: number): void;
    get(id: string): ImageBitmap | undefined;
    set(id: string, bitmap: ImageBitmap): void;
}

declare class ColorSpaceJS extends HostObject<"ColorSpace"> implements ColorSpace {
    readonly value: "srgb" | "display-p3" | "adobe-rgb";
    __type__: "ColorSpace";
    constructor(value: "srgb" | "display-p3" | "adobe-rgb");
    getNativeValue(): "srgb" | "display-p3";
}
declare class ColorSpaceEnumJS implements ColorSpaceEnumValues {
    SRGB: ColorSpaceJS;
    DISPLAY_P3: ColorSpaceJS;
    ADOBE_RGB: ColorSpaceJS;
    Equals(a: ColorSpaceJS, b: ColorSpaceJS): boolean;
}
declare enum ImageFormatEnum {
    JPEG = 3,
    PNG = 4,
    WEBP = 6
}
declare enum PathVerb {
    Move = 0,
    Line = 1,
    Quad = 2,
    Conic = 3,
    Cubic = 4,
    Close = 5
}

declare abstract class CoreCanvasKit {
    Color(r: number, g: number, b: number, a?: number): Float32Array;
    Color4f(r: number, g: number, b: number, a?: number | undefined): Float32Array;
    ColorAsInt(r: number, g: number, b: number, a?: number): number;
    getColorComponents(cl: Color): number[];
    multiplyByAlpha(c: Float32Array, alpha: number): Float32Array;
    LTRBRect(left: number, top: number, right: number, bottom: number): Float32Array;
    XYWHRect(x: number, y: number, width: number, height: number): Float32Array;
    LTRBiRect(left: number, top: number, right: number, bottom: number): Int32Array;
    XYWHiRect(x: number, y: number, width: number, height: number): Int32Array;
    RRectXY(input: InputRect, rx: number, ry: number): Float32Array;
    Vector: canvaskit_wasm.VectorHelpers;
    ImageFormat: canvaskit_wasm.ImageFormatEnumValues;
    MipmapMode: canvaskit_wasm.MipmapModeEnumValues;
    PaintStyle: canvaskit_wasm.PaintStyleEnumValues;
    Path1DEffect: canvaskit_wasm.Path1DEffectStyleEnumValues;
    PathOp: canvaskit_wasm.PathOpEnumValues;
    PointMode: canvaskit_wasm.PointModeEnumValues;
    ColorSpace: ColorSpaceEnumJS;
    StrokeCap: canvaskit_wasm.StrokeCapEnumValues;
    StrokeJoin: canvaskit_wasm.StrokeJoinEnumValues;
    TileMode: canvaskit_wasm.TileModeEnumValues;
    VertexMode: canvaskit_wasm.VertexModeEnumValues;
    FontSlant: canvaskit_wasm.FontSlantEnumValues;
    FontWeight: canvaskit_wasm.FontWeightEnumValues;
    FontWidth: canvaskit_wasm.FontWidthEnumValues;
    ColorType: canvaskit_wasm.ColorTypeEnumValues;
    FillType: canvaskit_wasm.FillTypeEnumValues;
    FilterMode: canvaskit_wasm.FilterModeEnumValues;
    FontEdging: canvaskit_wasm.FontEdgingEnumValues;
    FontHinting: canvaskit_wasm.FontHintingEnumValues;
    AlphaType: canvaskit_wasm.AlphaTypeEnumValues;
    BlendMode: canvaskit_wasm.BlendModeEnumValues;
    BlurStyle: canvaskit_wasm.BlurStyleEnumValues;
    ClipOp: canvaskit_wasm.ClipOpEnumValues;
    Matrix: canvaskit_wasm.Matrix3x3Helpers;
    M44: canvaskit_wasm.Matrix4x4Helpers;
    Affinity: canvaskit_wasm.AffinityEnumValues;
    TRANSPARENT: Float32Array;
    BLACK: Float32Array;
    WHITE: Float32Array;
    RED: Float32Array;
    GREEN: Float32Array;
    BLUE: Float32Array;
    YELLOW: Float32Array;
    CYAN: Float32Array;
    MAGENTA: Float32Array;
    MOVE_VERB: PathVerb;
    LINE_VERB: PathVerb;
    QUAD_VERB: PathVerb;
    CONIC_VERB: PathVerb;
    CUBIC_VERB: PathVerb;
    CLOSE_VERB: PathVerb;
    GlyphRunFlags: {
        IsWhiteSpace: number;
    };
    TextAlign: canvaskit_wasm.TextAlignEnumValues;
    TextBaseline: canvaskit_wasm.TextBaselineEnumValues;
    TextDirection: canvaskit_wasm.TextDirectionEnumValues;
    TextHeightBehavior: canvaskit_wasm.TextHeightBehaviorEnumValues;
    PlaceholderAlignment: canvaskit_wasm.PlaceholderAlignmentEnumValues;
    RectHeightStyle: canvaskit_wasm.RectHeightStyleEnumValues;
    RectWidthStyle: canvaskit_wasm.RectWidthStyleEnumValues;
    ColorChannel: canvaskit_wasm.ColorChannelEnumValues;
    LineThroughDecoration: number;
    NoDecoration: number;
    UnderlineDecoration: number;
    OverlineDecoration: number;
    ShadowTransparentOccluder: number;
    ShadowGeometricOnly: number;
    ShadowDirectionalLight: number;
    DecorationStyle: canvaskit_wasm.DecorationStyleEnumValues;
    gpu: boolean;
    polyfill: boolean;
    managed_skottie: boolean;
    rt_effect: boolean;
    skottie: boolean;
    SaveLayerInitWithPrevious: number;
    SaveLayerF16ColorType: number;
}

declare class CanvasKitJS extends CoreCanvasKit implements CanvasKit {
    private static instance;
    private contextes;
    private _colorCtx;
    private constructor();
    get colorCtx(): OffscreenCanvasRenderingContext2D;
    static getInstance(): CanvasKit;
    parseColorString(colorStr: string, _colorMap?: Record<string, Float32Array> | undefined): Float32Array;
    computeTonalColors(colors: TonalColorsInput): TonalColorsOutput;
    getShadowLocalBounds(_ctm: InputMatrix, _path: Path, _zPlaneParams: InputVector3, _lightPos: InputVector3, _lightRadius: number, _flags: number, _dstRect?: Float32Array | undefined): Float32Array | null;
    Malloc(TypedArray: TypedArrayConstructor, len: number): MallocObj;
    MallocGlyphIDs(len: number): MallocObj;
    Free(_m: MallocObj): void;
    MakeCanvasSurface(canvas: string | HTMLCanvasElement): Surface | null;
    MakeRasterDirectSurface(_ii: ImageInfo, _pixels: MallocObj, _bytesPerRow: number): Surface | null;
    MakeSWCanvasSurface(canvas: string | HTMLCanvasElement): Surface | null;
    MakeWebGLCanvasSurface(canvas: string | HTMLCanvasElement, colorSpace?: ColorSpaceJS | undefined, _opts?: WebGLOptions | undefined): Surface | null;
    MakeSurface(width: number, height: number): Surface | null;
    GetWebGLContext(canvas: HTMLCanvasElement, _opts?: WebGLOptions | undefined): number;
    MakeGrContext(ctx: number): GrDirectContext | null;
    MakeWebGLContext(ctx: number): GrDirectContext | null;
    MakeOnScreenGLSurface(_ctx: GrDirectContext, _width: number, _height: number, _colorSpace: ColorSpace, _sampleCount?: number | undefined, _stencil?: number | undefined): Surface | null;
    MakeGPUDeviceContext(_device: any): GrDirectContext | null;
    MakeGPUTextureSurface(_ctx: GrDirectContext, _texture: any, _width: number, _height: number, _colorSpace: ColorSpace): Surface | null;
    MakeGPUCanvasContext(_ctx: GrDirectContext, _canvas: HTMLCanvasElement, _opts?: WebGPUCanvasOptions | undefined): WebGPUCanvasContext | null;
    MakeGPUCanvasSurface(_canvasContext: WebGPUCanvasContext, _colorSpace: ColorSpace, _width?: number | undefined, _height?: number | undefined): Surface | null;
    MakeRenderTarget(grCtx: GrDirectContextJS, ...args: [number, number] | [ImageInfo]): Surface | null;
    MakeLazyImageFromTextureSource(_src: TextureSource, _info?: ImageInfo | PartialImageInfo | undefined, _srcIsPremul?: boolean | undefined): Image;
    deleteContext(ctx: number): void;
    getDecodeCacheLimitBytes(): number;
    getDecodeCacheUsedBytes(): number;
    setDecodeCacheLimitBytes(_size: number): void;
    MakeAnimatedImageFromEncoded(_bytes: Uint8Array | ArrayBuffer): AnimatedImage | null;
    MakeCanvas(width: number, height: number): EmulatedCanvas2D;
    MakeImage({ width, height, colorSpace }: ImageInfo, data: number[] | Uint8Array | Uint8ClampedArray, _bytesPerRow: number): Image | null;
    MakeImageFromEncoded(_bytes: Uint8Array | ArrayBuffer): Image | null;
    MakeImageFromCanvasImageSource(src: CanvasImageSource): Image;
    MakePicture(_bytes: Uint8Array | ArrayBuffer): SkPicture | null;
    MakeVertices(_mode: EmbindEnumEntity, _positions: InputFlattenedPointArray, _textureCoordinates?: InputFlattenedPointArray | null | undefined, _colors?: Float32Array | ColorIntArray | null | undefined, _indices?: number[] | null | undefined, _isVolatile?: boolean | undefined): Vertices;
    MakeAnimation(_json: string): SkottieAnimation;
    MakeManagedAnimation(_json: string, _assets?: Record<string, ArrayBuffer> | undefined, _filterPrefix?: string | undefined, _soundMap?: SoundMap | undefined): ManagedSkottieAnimation;
    ParagraphStyle: ParagraphStyleConstructor;
    ContourMeasureIter: ContourMeasureIterConstructor;
    Font: FontConstructor;
    Paint: DefaultConstructor<Paint>;
    Path: PathConstructorAndFactory;
    PictureRecorder: DefaultConstructor<PictureRecorder>;
    TextStyle: TextStyleConstructor;
    ParagraphBuilder: canvaskit_wasm.ParagraphBuilderFactory;
    ColorFilter: canvaskit_wasm.ColorFilterFactory;
    FontCollection: canvaskit_wasm.FontCollectionFactory;
    FontMgr: canvaskit_wasm.FontMgrFactory;
    ImageFilter: canvaskit_wasm.ImageFilterFactory;
    MaskFilter: canvaskit_wasm.MaskFilterFactory;
    RuntimeEffect: canvaskit_wasm.RuntimeEffectFactory;
    Shader: canvaskit_wasm.ShaderFactory;
    Typeface: canvaskit_wasm.TypefaceFactory;
    TypefaceFontProvider: canvaskit_wasm.TypefaceFontProviderFactory;
    PathEffect: canvaskit_wasm.PathEffectFactory;
    ImageData: {
        new (sw: number, sh: number, settings?: ImageDataSettings | undefined): ImageData;
        new (data: Uint8ClampedArray, sw: number, sh?: number | undefined, settings?: ImageDataSettings | undefined): ImageData;
        prototype: ImageData;
    };
    ColorMatrix: canvaskit_wasm.ColorMatrixHelpers;
    TextBlob: canvaskit_wasm.TextBlobFactory;
    MakeImageFromURIAsync(url: string): Promise<unknown>;
    MakeImageFromEncodedAsync(bytes: Uint8Array | ArrayBuffer, imageFormat: ImageFormatEnum): Promise<unknown>;
}

declare global {
    interface Window {
        CanvasKit: CanvasKit;
        CanvasKitJS: CanvasKit;
        CanvasKitInit: (opts?: CanvasKitInitOptions) => Promise<CanvasKit>;
    }
}
declare const CanvasKitInit: () => Promise<unknown>;

export { CanvasKitJS, CanvasKitInit as default };
